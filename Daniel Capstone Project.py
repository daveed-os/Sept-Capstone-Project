# -*- coding: utf-8 -*-
"""Capstone Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vqLxrtDRV6fclA-Qs6Wd26_wv8KMn_Tr
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import feature_engine as fe
import seaborn as sns

!pip install feature-engine

ins=pd.read_csv('/content/drive/MyDrive/Data Analysis/Insurance_data.csv')
ins.head()

ins.info()

ins.isnull().sum()

#Question 1 : What is the distribution of the target variable (classification outcome)?
targ_dist = ins['target'].value_counts()
print (f'The distribution class of target variable 0 and 1  is \n {targ_dist}')
targ_per = ins['target'].value_counts(normalize=True)*100

print (f' The percentage  of target variable 0 and 1 in the dataset is \n {targ_per}')

# Question 2: Is there a significant relationship between Gender and the target variable? (Alternative 1- chi-square test approach )
from scipy. stats import chi2_contingency

Contingency_table = pd.crosstab(ins['Gender'], ins['target'])

chi2, P , _ , _ = chi2_contingency(Contingency_table)
print (f'The Chi Statistical Value is {chi2}')
print(f'The p value is {P}')

p_value = 0.05
if P  < p_value:
    print('Reject Null Hypothesis - there is a significant relationship between  Gender and target variable')
else:
    print('Accept Null Hypothesis - there is no significant relationship between Gender and target variable')

# Question 2: Is there a significant relationship between Gender and the target variable? (Alternative 2-  )
#handle missing values
from feature_engine.imputation import CategoricalImputer
ins['Gender'] = ins['Gender'].astype('category')

ca = CategoricalImputer(variables = ['Gender'],imputation_method = 'missing')

ins = ca.fit_transform(ins)


from feature_engine.encoding import OrdinalEncoder

oe = OrdinalEncoder(encoding_method='arbitrary', variables = ['Gender'])

ins = oe.fit_transform(ins)

alt2 = ins['Gender'].corr (ins['target'])
print (f' The correlation between Gender and target variable is {alt2} indicating a positve correlation')

#Question 3 : How does the Age of the customers correlate with the likelihood of positive or negative outcomes in the target variable?

age_targ = ins['Age'].corr (ins['target'])
print (f' {age_targ} a negative outcome-suggesting that as Age increases the possiblity of a positive outcome decreases and vice versa')

#Question 4 : What is the average No_Pol (number of policies) per customer?

avg_npol = ins['No_Pol'].mean()
print (f'The avergae number of policies per customer is : {avg_npol.round()}')

#Question 5 .	Are there differences in policy outcomes (target) across different ProductName categories?

diff_pol = ins.groupby('ProductName')['target'].count()
diff_pol

# Question 6. What is the average duration between Policy Start Date and Policy End Date(Alternative 1)

policy_date_1 = np.datetime64('2010-05-14')
policy_date_2 = np.datetime64('2011-05-13')

difference = policy_date_2 - policy_date_1

print(f'Duration between date in days:',difference)

# Question 6. What is the average duration between Policy Start Date and Policy End Date(Alternative 2)
from datetime import datetime

date1 = datetime(2010, 5, 14)
date2 = datetime(2011, 5, 13)

duration = date2 - date1
days_between = duration.days
print(f'Duration between date in days:', days_between)

#Question 7.Is there any seasonal trend in Policy Start Date (e.g., more policies starting during certain months)?
ins['Policy Start Date'] = pd.to_datetime(ins['Policy Start Date'])

ins['Year'] = ins['Policy Start Date'].dt.year
ins['Month'] = ins['Policy Start Date'].dt.month
ins['Month_Name'] = ins['Policy Start Date'].dt.month_name()

yearly_trend = ins.groupby('Year')['No_Pol'].count()
print(yearly_trend)

ins['Policy Start Date'] = pd.to_datetime(ins['Policy Start Date'])

ins['Year'] = ins['Policy Start Date'].dt.year
ins['Month'] = ins['Policy Start Date'].dt.month
ins['Month_Name'] = ins['Policy Start Date'].dt.month_name()

Monthly_trend = ins.groupby('Month_Name')['No_Pol'].count()
print(Monthly_trend)

#Question 8 : Does the Car_Category affect the outcome of the target variable? (Alternative 1 - Encoding / Coorelation)
from feature_engine.imputation import CategoricalImputer

ins['Car_Category'] = ins['Car_Category'].astype('category')

ca = CategoricalImputer(variables = ['Car_Category'],imputation_method = 'missing')

ins = ca.fit_transform(ins)


from feature_engine.encoding import OrdinalEncoder

oe = OrdinalEncoder(encoding_method= 'arbitrary', variables = ['Car_Category'])

ins = oe.fit_transform(ins)

from scipy.stats import pearsonr

coorelation, p_value = pearsonr(ins['Car_Category'], ins['target'])
print(coorelation)
print(p_value)

#Question 9.	How does Car_Make (e.g., TOYOTA, etc.) impact policy outcomes?
q9 = ins['Car_Category'].corr(ins['target'])
q9

from scipy.stats import chi2_contingency #This approach provide a meaningful result that insight can be drawn from (Alternative 2)

contingency_table = pd.crosstab(ins['Car_Category'], ins['target'])

chi2, p_value, _, _ = chi2_contingency(contingency_table)
print("Chi-Square Test p-value:", p_value)

p = 0.05
if p_value  < p:
    print('Reject Null Hypothesis - This suggests that Car_Category has a significant effect on the target variable.\n Certain car categories are likely associated with different outcomes in the target variable.')
else:
    print('Accept Null Hypothesis - there is no significant relationship between Gender and target variable')

#Question 9.	How does Car_Make (e.g., TOYOTA, etc.) impact policy outcomes?

from scipy.stats import chi2_contingency

Contingency_Table = pd.crosstab(ins['Subject_Car_Make'], ins['No_Pol'])

chi2, p, _, _ = chi2_contingency(Contingency_Table)
print("Chi-Square Test p-value:", p)

alpha = 0.05
if p  < alpha:
    print('Reject Null Hypothesis - This suggests that theres a significant relationship between Car Make and Policy Outcome - \n meaning the make of the cars effect the  outcome of policy.')
else:
    print('Accept Null Hypothesis - there is no significant relationship between Car Make and Policy Outcome')

#Question 10. Are certain car colors (Subject_Car_Colour) more prone to negative outcomes (i.e., target = 1)?
from scipy.stats import chi2_contingency

Contingency_Table = pd.crosstab(ins['Subject_Car_Colour'], ins['target']== 1)

chi2, p, _, _ = chi2_contingency(Contingency_Table)
print("Chi-Square Test p-value:", p)

alpha = 0.05
if p  < alpha:
    print('Reject Null Hypothesis meaning there are evidences that Certain Car Colours are prone to  negative outcome')
else:
    print('Accept Null Hypothesis meaning there is no evidence if Car Colour are prone to  negative outcome')

#Question 11:	How does the No_Pol (number of policies) correlate with the customerâ€™s age?
pol_age_corr = ins['No_Pol'].corr(ins['Age'])
print(f'The correlation between No_Pol and Age is {pol_age_corr:.4f}')
print("This indicate that the number of policies increase or decreases with Customer's Age")

#Question 12: Does LGA_Name (location) or State influence the target variable?

from feature_engine.imputation import CategoricalImputer

ins['State'] = ins['State'].astype('category')

ca = CategoricalImputer(variables= ['State'], imputation_method='missing')
ins = ca.fit_transform(ins)

from feature_engine.encoding import  OrdinalEncoder
oe = OrdinalEncoder(encoding_method= 'arbitrary', variables= ['State'])
ins = oe.fit_transform(ins)

inf_sta_targ = ins['State']. corr (ins['target'])
print(f'{inf_sta_targ:.4f} indicate that State influences target variable')

#Question 13.	What is the gender distribution in the dataset, and how does it relate to policy outcomes?
gen_dis = ins['Gender'].value_counts()
print(gen_dis)
gen_per = ins['Gender'].value_counts(normalize = True)*100
print(f'{gen_per.round()}')

#14. How many unique car categories are present in the dataset, and what is their distribution?

ins['Car_Category'].value_counts()

#16.Are there any notable differences in policy outcomes between Car Classic, CarSafe, and Muuve?
car_classic_data = ins[ins['ProductName'] == 'Car Classic']
car_classic_policy_counts = car_classic_data['No_Pol'].value_counts()
print('car classic policy counts')
print(car_classic_policy_counts)

car_Safe_data = ins[ins['ProductName'] == 'CarSafe']
car_Safe_policy_counts = car_Safe_data['No_Pol'].value_counts()
print('car Safe policy counts')
print(car_Safe_policy_counts)

muuve_data = ins[ins['ProductName'] == 'Muuve']
muuve_policy_counts = muuve_data['No_Pol'].value_counts()
print('muuve policy counts')
print(muuve_policy_counts)

#17.	What percentage of the policies were for Saloon cars compared to other categories?

Saloon_cars = ins[ins['Car_Category']== 'Saloon']
per_pol_salon = len(Saloon_cars) / len(ins) * 100


print(per_pol_salon)

ins['No_Pol'].unique()

len(Saloon_cars)

#19	Are customers with multiple policies (No_Pol > 1) more likely to have certain outcomes?
filtered_pol = ins[ins['No_Pol']> 1]
q19 = filtered_pol['No_Pol'].corr(ins['target'])
q19

#20.	Are there any missing values in the dataset, and if so, how are they distributed across columns?
ins.isnull().sum()

#DATA VISUALIZATION 1.	Can we visualize the distribution of Age across different policy outcomes?
Age_targ = ins.groupby('age_group')['target'].value_counts().unstack()
Age_targ.plot(kind='bar', colormap="viridis")
plt.title('Distribution of Age across different policy outcomes')
plt.xlabel('Age')
plt.ylabel('Policy Outcome')
plt.show()

Age_targ = ins.groupby('age_group')['target'].value_counts().unstack()
Age_targ

negative_age = ins[ins['Age'] < 0]

ins['Age'] = ins['Age'].apply(lambda x: np.nan if x < 0 else x)

def age_group(age):
    if 0<= age <= 18:
        return 'Under 18'
    elif 19 <= age <= 30:
        return '19-30'
    elif 31 <= age <= 40:
        return '31-40'
    elif 41 <= age <= 60:
        return '41-60'
    elif 61 <= age <= 100:
        return '51-60'
    elif age > 100:
        return '100+'
    else:
        return ""
ins['age_group'] = ins['Age'].apply(age_group)

ins_cleaned = ins.dropna(subset=['Age'])
ins_cleaned

ins['Age'].unique()

ins.groupby('age_group')['target'].value_counts()

#2.	How does the count of different car categories (Car_Category) break down by policy outcome?
category_outcome = ins.groupby('Car_Category')['target'].count()

plt.figure(figsize=(6,6))
category_outcome.plot(kind = 'bar', colormap ='viridis')
plt.title('Count of different car categories by policy outcome')
plt.ylabel('Policy Outcome')
plt.xlabel('Car Category')
plt.xticks(rotation= 80)
plt.show()

ins.groupby('Car_Category')['target'].count()

#3.	Can we visualize the number of policies (No_Pol) by Gender?
plt.figure(figsize=(6,6))
No_pol_Gender = ins.groupby('Gender')['No_Pol'].count()
No_pol_Gender.plot(kind='bar', colormap="viridis")
plt.title('Number of Policies by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Policies')

plt.show()

ins.groupby('Gender')['No_Pol'].count()

ins.columns

plt.figure(figsize=(9,6))
Monthly_trend = ins.groupby('Month_Name')['No_Pol'].count().sort_values(ascending=False)
Monthly_trend.plot(kind='line', colormap="viridis")
plt.title('Monthly Trend of Policies')
plt.xlabel('Month')
plt.ylabel('Number of Policies')
plt.xticks(rotation=80)
plt.show()

Monthly_trend

#5.	Can we create a bar chart showing the number of policies by ProductName?
plt.figure(figsize=(10,6))
no_pol_gender = ins.groupby('ProductName')['No_Pol'].count()
no_pol_gender.plot(kind='bar', colormap="viridis")
plt.title('Number of Policies by Product Name')
plt.xlabel('Number of Policies')
plt.show()

ins.groupby('ProductName')['No_Pol'].sum()

#6.How does Car_Make distribution vary across the target variable?
plt.figure()
Car_targ = ins.groupby('Subject_Car_Make')['target'].value_counts().unstack()
Car_targ.plot(kind = 'bar', colormap="viridis")
plt.title('Car_Make distribution across the target variable')
plt.xlabel('Car_Make')
plt.ylabel('Number of Policies')
plt.gcf().set_size_inches(20, 5)
plt.show()

ins['Subject_Car_Make'].unique()

at = ins.groupby('Subject_Car_Make')['target'].value_counts()
at

ins['State'].unique()

#7.	Can we visualize the geographic distribution of policies by State?
state_pol = ins.groupby('State')['No_Pol'].count()
plt.figure(figsize=(25,10))
state_pol.plot(kind='line', colormap="viridis")
plt.title('Geographic Distribution of Policies by State')
plt.xlabel('State')
plt.ylabel('Number of Policies')
plt.xticks(ticks=range(len(state_pol.index)), labels=state_pol.index,rotation=90)
plt

#8.	What is the relationship between No_Pol and Age in a scatter plot?
sns.scatterplot(x='No_Pol', y = 'age_group', data = ins)
plt.title('Relationship between No_Pol and Age')
plt.xlabel('No_Pol')
plt.ylabel('Age')
plt.show()